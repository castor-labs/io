name: "Code Integration Checks"

on:
  pull_request:
  push:
    branches:
      - "main"

env:
  COMPOSER_FLAGS: "--ansi --no-interaction --no-progress --no-suggest --ignore-platform-req=php"

jobs:

  # Checks for code style issues
  cs-fixer:
    name: "Style Checks by PHPCsFixer"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        dependencies:
          - "locked"
        php-version:
          - "7.4"
        operating-system:
          - "ubuntu-latest"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          php-version: "${{ matrix.php-version }}"
          ini-values: memory_limit=-1
          tools: composer:v2
      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: |
            ~/.composer/cache
            vendor
          key: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
          restore-keys: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
      - name: "Install highest dependencies"
        if: ${{ matrix.dependencies == 'highest' }}
        run: "composer update ${{ env.COMPOSER_FLAGS }}"
      - name: "Install locked dependencies"
        if: ${{ matrix.dependencies == 'locked' }}
        run: "composer install ${{ env.COMPOSER_FLAGS }}"
      - name: "Coding Standard"
        run: "vendor/bin/php-cs-fixer fix --dry-run -v"

  # This job statically analyses the code looking for errors
  psalm:
    name: "Static Analysis by Psalm"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        dependencies:
          - "locked"
        php-version:
          - "7.4"
        operating-system:
          - ubuntu-latest
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          php-version: "${{ matrix.php-version }}"
          ini-values: memory_limit=-1
          tools: composer:v2
      - name: "Cache Dependencies"
        uses: "actions/cache@v2"
        with:
          path: |
            ~/.composer/cache
            vendor
          key: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
          restore-keys: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
      - name: "Install highest dependencies"
        if: ${{ matrix.dependencies == 'highest' }}
        run: "composer update ${{ env.COMPOSER_FLAGS }}"
      - name: "Install locked dependencies"
        if: ${{ matrix.dependencies == 'locked' }}
        run: "composer install ${{ env.COMPOSER_FLAGS }}"
      - name: "psalm"
        run: "vendor/bin/psalm --shepherd --stats"

  # This job runs the test suite of the codebase
  phpunit:
    name: "Unit Tests by PHPUnit"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        dependencies:
          - "highest"
          - "locked"
        php-version:
          - "7.4"
          - "8.0"
        operating-system:
          - "ubuntu-latest"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          php-version: "${{ matrix.php-version }}"
          ini-values: memory_limit=-1
          tools: composer:v2
      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: |
            ~/.composer/cache
            vendor
          key: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
          restore-keys: "php-${{ matrix.php-version }}-${{ matrix.dependencies }}"
      - name: "Install highest dependencies"
        if: ${{ matrix.dependencies == 'highest' }}
        run: "composer update ${{ env.COMPOSER_FLAGS }}"
      - name: "Install locked dependencies"
        if: ${{ matrix.dependencies == 'locked' }}
        run: "composer install ${{ env.COMPOSER_FLAGS }}"
      - name: "Tests"
        run: "vendor/bin/phpunit"